---
- hosts: localhost
  become: true
  tasks:
  - name: Include vars
    include_vars:
      dir: ../vars
  - name: Install Dependencies
    shell: rpm-ostree install "{{ item }}"
    with_items:
      - "{{ dependencies }}"
    ignore_errors: yes
  - name: Create .vim
    file:
      state: directory
      path: /var/home/{{ user }}/.vim/
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Download dracula VIM
    get_url:
      url: "{{ dracula_url }}"
      dest: /var/home/{{ user }}/.vim/colors
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Copy .vimrc
    copy:
      src: ../files/.vimrc
      dest: /var/home/{{ user }}/.vimrc
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Copy fonts
    copy:
      src: ../files/fonts/
      dest: /var/home/{{ user }}/.local/share/fonts/
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Copy .bashrc
    copy:
      src: ../files/.bashrc
      dest: /var/home/{{ user }}/.bashrc
  - name: Download pip3 apps 
    pip:
      name: "{{ item }}"
      executable: pip3
    with_items:
      - "{{ pip3_apps }}"
  - name: Copy Xdefaults
    copy:
      src: ../files/.Xdefaults
      dest: /var/home/{{ user }}/.Xdefaults
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Create ~/.urxvt/ext directory
    file:
      path: /var/home/{{ user }}/.urxvt/ext
      state: directory
      recurse: yes
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Copy i3 clipboard perl script
    copy:
      src: ../files/clipboard
      dest: /var/home/{{ user }}/.urxvt/ext/clipboard
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Install Laptop Dependencies
    shell: rpm-ostree install "{{ item }}"
    with_items:
      - "{{ laptop_dependencies }}"
    ignore_errors: yes
    when: laptop
  - name: Create config directory
    file:
      path: /var/home/{{ user }}/.config/i3
      state: directory
      owner: "{{ user }}"
      group: "{{ user }}"      
  - name: Copy i3 config
    copy:
      src: ../files/config
      dest: /var/home/{{ user }}/.config/i3/config 
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Install Nvidia Dependencies
    shell: rpm-ostree install "{{ item }}"
    with_items:
      - "{{ nvidia_dependencies }}"
    ignore_errors: yes
  - name: Add grub blacklist for nouveau in grub
    shell: rpm-ostree kargs --append=rd.driver.blacklist=nouveau --append=modprobe.blacklist=nouveau --append=nvidia-drm.modeset=1
    ignore_errors: yes
    register: nouveau_grub
  - name: Add IOMMU to grub
    shell: rpm-ostree initramfs --enable --arg=--add-drivers --arg="vfio vfio-pci vfio_iommu_type1"
    register: iommu_grub
  - name: Remove xorg-x11-drv-nouveau
    shell: rpm-ostree uninstall org-x11-drv-nouveau
    ignore_errors: yes
# Not the most idempotent way of handling this, but can't seem to find a relevant uname fact to reference.
  - name: Disable mouse acceleration
    copy:
      src: ../files/01-mouse-acceleration.conf
      dest: /etc/X11/xorg.conf.d/01-mouse-acceleration.conf
  - name: Set xorg.conf for nvidia changes
    copy:
      src: ../files/xorg.conf
      dest: /etc/X11/xorg.conf
      owner: root
      group: root
    when: nouveau_grub.changed 
  - name: Update xinit.rc
    copy:
      src: ../files/.xinitrc
      dest: /var/home/{{ user }}/.xinitrc
      owner: "{{ user }}"
      group: "{{ user }}"
    when: nouveau_grub.changed 
  - name: Install rpmfusion
    shell: rpm-ostree install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
    ignore_errors: yes
  - name: Add sudoers.d configs
    template:
      src: ../templates/{{ item }}.j2
      dest: /etc/sudoers.d/{{ item }}
      owner: root
      group: root
      mode: '0644'
    with_items:
      - "{{ sudoers_configs }}"
  - name: Oh My ZSH Pull
    git:
      repo: https://github.com/robbyrussell/oh-my-zsh
      dest: "/var/home/{{ user }}/.oh-my-zsh"
    become: false
    register: zsh_clone
  - name: Set ZSH shell
    user:
      name: "{{ user }}"
      shell: /bin/zsh
  - name: .zshrc copy
    copy:
      src: ../files/.zshrc
      dest: "/var/home/{{ user }}/.zshrc"
      owner: "{{ user }}"
      group: "{{ user }}"
    when: zsh_clone
  - name: ZSH auto suggestion pull
    git:
      repo: https://github.com/zsh-users/zsh-autosuggestions.git
      dest: "/home/hac/{{ user }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
    become: false
    when: zsh_clone
  - name: Fix zsh perms
    file:
      path: /var/home/{{ user }}/.oh-my-zsh
      state: directory
      owner: "{{ user }}"
      group: "{{ user }}"
      recurse: yes
  - name: Install flathub
    flatpak_remote:
      name: flathub
      state: present
      flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo
      method: user
    become_user: "{{ user }}"
  - name: Install Flatpaks 
    flatpak:
      name: "{{ item }}"
      state: present
      remote: flathub
      method: user
    become_user: "{{ user }}"
    with_items:
      - "{{ flatpaks }}" 
  - name: Create bin
    file:
      path: /var/home/{{ user }}/bin
      state: directory
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Drop services for dmenu 
    template:
      src: ../files/services/{{ item }}
      dest: /var/home/{{ user }}/bin/{{ item }}
      owner: "{{ user }}"
      group: "{{ user }}"
      mode: 0700
    with_items:
      - "{{ services }}"

    - name: Install neovim
      shell: rpm-ostree install neovim 
      ignore_errors: yes

    - name: Create neovim directory for autoloading configurations
      file:
        path: "/var/home/{{ user }}/.local/share/nvim/site/autoload/"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        recurse: yes
        mode: 0o700

    - name: Install vim-plug
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "/var/home/{{ user }}/.local/share/nvim/site/autoload/plug.vim"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: 0o600

    - name: Create base directory for configurations of neovim
      file:
        path: "/var/home/{{ user }}/.config/nvim"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: directory
        mode: 0o700

    - name: Configure neovim
      template:
        src: ../templates/init.vim
        dest: "/var/home/{{ user }}/.config/nvim"
        mode: 0o600
        owner: "{{ user }}"
        group: "{{ user }}"
