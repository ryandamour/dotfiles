---
- hosts: localhost
  become: true
  tasks:
  - name: Include vars
    include_vars:
      dir: vars
  - name: Install Dependencies
    dnf:
      state: latest
      name: "{{ item }}"
    with_items:
      - "{{ dependencies }}"
  - name: Create .vim
    file:
      state: directory
      path: /home/{{ user }}/.vim/
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Download dracula VIM
    get_url:
      url: "{{ dracula_url }}"
      dest: /home/{{ user }}/.vim/colors
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Download pip3 apps 
    pip:
      name: "{{ item }}"
      executable: pip3
    with_items:
      - "{{ pip3_apps }}"
  - name: Copy Xdefaults
    copy:
      src: .Xdefaults
      dest: /home/{{ user }}/.Xdefaults
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Copy i3 clipboard perl script
    copy:
      src: clipboard
      dest: /usr/lib64/urxvt/perl/clipboard
      owner: root
      group: root
  - name: Add exec i3 to .xinitrc
    lineinfile:
      path: /home/{{ user }}/.xinitrc
      line: exec i3 
      state: present
      insertafter: EOF
      owner: "{{ user }}"
      group: "{{ user }}"
      create: True
  - name: Install Laptop Dependencies
    dnf:
      name: "{{ item }}"
      state: latest
    with_items:
      - "{{ laptop_dependencies }}"
    when: laptop
  - name: Install Packer
    unarchive:
      src: "{{ packer_url }}" 
      dest: /usr/local/bin/
      remote_src: yes
      owner: root
      group: root
  - name: Install Terraform 
    unarchive:
      src: "{{ vault_url }}"
      dest: /usr/local/bin
      remote_src: yes
      owner: root
      group: root
  - name: Copy i3 config
    copy:
      src: config
      dest: /home/{{ user }}/.config/i3/config 
      owner: "{{ user }}"
      group: "{{ user }}"
  - name: Install Nvidia Dependencies
    dnf:
      name: "{{ item }}"
      state: latest
    with_items:
      - "{{ nvidia_dependencies }}"
    when: laptop
  - name: Blacklist nouvuea
    lineinfile:
      path: /etc/modprobe.d/blacklist.conf
      line: blacklist nouveau
      state: present
      insertafter: EOF
      create: yes
  - name: Add grub blacklist for nouveau in grub
    lineinfile:
      state: present
      dest: /etc/default/grub
      backrefs: yes
      regexp: '^(GRUB_CMDLINE_LINUX=(?!.*rd.driver.blacklist=nouveau)\"[^\"]+)(\".*)'
      line: '\1 rd.driver.blacklist=nouveau\2'
    register: nouveau_grub
    when: laptop
  - name: Add IOMMU to grub
    lineinfile:
      state: present
      dest: /etc/default/grub
      backrefs: yes
      regexp: '^(GRUB_CMDLINE_LINUX=(?!.*iommu=1 amd_iommu=on rd.driver.pre=vfio-pci)\"[^\"]+)(\".*)'
      line: '\1 iommu=1 amd_iommu=on rd.driver.pre=vfio-pci\2'
    register: iommu_grub
    when: laptop
  - name: Run grub2-mkconfig
    command: grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
    when: nouveau_grub.changed or iommu_grub.changed
  - name: Remove xorg-x11-drv-nouveau
    dnf:
      name: xorg-x11-drv-nouveau
      state: absent
    when: laptop
# Not the most idempotent way of handling this, but can't seem to find a relevant uname fact to reference.
  - name: Create new dracut initramfs image
    shell: mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r)-nouveau.img && dracut /boot/initramfs-$(uname -r).img $(uname -r)
    when: nouveau_grub.changed or iommu_grub.changed
  - name: Flatpak install flathub 
    flatpak_remote:
      name: flathub
      state: present
      flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    become_user: "{{ user }}"
    when: laptop
  - name: Flatpak install steam
    flatpak:
      name: com.valvessoftware.Stream
      state: present
    become_user: "{{ user }}"
    when: laptop
  - name: Disable mouse acceleration
    file:
      src: files/01-mouse-acceleration.conf
      dest: /etc/X11/xorg.conf.d/01-mouse-acceleration.conf
    when: laptop
  - name: Drop to runlevel3 
    command: systemctl set-default multi-user.target
    when: nouveau_grub.changed or iommu_grub.changed
    when: laptop
    register: runlevel3_enabled
  - name: Set xorg.conf for nvidia changes
    copy:
      src: files/xorg.conf
      dest: /etc/X11/xorg.conf
      owner: root
      group: root
    when: runlevel3_enabled
  - name: Update xinit.rc
    copy:
      src: files/.xinitrc
      dest: /home/{{ user }}/.xinitrc
      owner: "{{ user }}"
      group: "{{ user }}"
    when: runlevel3_enabled.changed
  - debug:
      msg: "Multi-user.target runtime has been enabled at default.  Make sure the Nvidia installer is present before rebooting.  Once reboot and Nvidia install is complete, set default runtime back to graphical.target.  Also, make sure to _NOT_ allow the nvidia installer to populate the xorg.conf, as that has already been done."
    when: runlevel3_enabled.changed
