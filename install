#!/usr/bin/env bash
set -euo pipefail

# -----------------------------------------------------------------------------
# Silverblue bootstrapper:
#  - Reads dependencies from a YAML-style file (or simple list)
#  - Layers them via rpm-ostree only if missing
#  - Copies dotfiles idempotently with rsync, backing up collisions
#  - Optionally sets login shell to zsh if installed
#
# Usage:
#   ./bootstrap.sh [-d deps.yaml] [-s /path/to/dotfiles] [--no-zsh-chsh] [--dry-run]
#
# Examples:
#   ./bootstrap.sh
#   ./bootstrap.sh -d deps.yaml -s ./dotfiles
#   ./bootstrap.sh -s ~/dotfiles --dry-run
#
# Notes:
#  - rpm-ostree will stage a new deployment if needed; you’ll need to reboot.
#  - Idempotency: already-installed packages are skipped; rsync updates only changes.
# -----------------------------------------------------------------------------

DEPS_FILE="deps.yaml"
DOTFILES_SRC="./dotfiles"
DO_CHSH=true
DRY_RUN=false
LAPTOP=false
LAPTOP_DEPS_FILE="deps.laptop.yaml"
INSTALL_NVCHAD=false
NVCHAD_OVERLAY_SRC=""
FORCE_NVCHAD=false
INSTALL_P10K=false
P10K_DIR="${HOME}/.local/share/powerlevel10k"
P10K_REPO="https://github.com/romkatv/powerlevel10k.git"
P10K_CONFIG_SRC=""
FORCE_P10K=false
INSTALL_OHMYZSH=false
OHMYZSH_DIR="${HOME}/.oh-my-zsh"
OHMYZSH_THEME=""          # if empty, defaults to powerlevel10k when available, else 'robbyrussell'
OHMYZSH_PLUGINS="git"     # comma-separated list, e.g. "git,zsh-autosuggestions,zsh-syntax-highlighting"
FORCE_OHMYZSH=false
FLATPAK_FILE="flatpak.yaml"
FLATPAK_SCOPE="user"   # "user" (default) or "system"


log() { printf "\033[1;34m[INFO]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[WARN]\033[0m %s\n" "$*"; }
err() { printf "\033[1;31m[ERR]\033[0m  %s\n" "$*" >&2; }

have_cmd() {
  command -v "$1" >/dev/null 2>&1
}

# Deduplicate array items while preserving order
dedupe() {
  # usage: dedupe out_array_name "${in[@]}"
  local -n _out="$1"; shift
  local -A seen=()
  local x
  for x in "$@"; do
    [[ -n "${seen[$x]:-}" ]] && continue
    seen["$x"]=1; _out+=("$x")
  done
}

need_cmd() {
  command -v "$1" >/dev/null 2>&1 || { err "Missing required command: $1"; exit 1; }
}

is_silverblue() {
  # Heuristic: rpm-ostree present & status works
  command -v rpm-ostree >/dev/null 2>&1 && rpm-ostree status >/dev/null 2>&1
}

parse_flatpaks() {
  # Emits one ref per line from YAML:
  # flatpaks:
  #   - com.github.tchx84.Flatseal
  local file="$1"
  if [[ ! -f "$file" ]]; then
    return 0
  fi
  awk '
    /^[[:space:]]*#/ { next }                           # skip comments
    /^[[:space:]]*flatpaks:[[:space:]]*$/ { inlist=1; next }
    inlist && /^[^[:space:]-][^:]*:/ { inlist=0 }       # next top-level key → stop
    inlist && /^[[:space:]]*-[[:space:]]*/ {
      gsub(/^[[:space:]]*-[[:space:]]*/, "", $0)
      gsub(/[[:space:]]+$/, "", $0)
      if ($0 != "") print $0
    }
  ' "$file"
}

flatpak_installed() {
  local id="$1"
  flatpak list --app --columns=application 2>/dev/null | grep -Fxq "$id" && return 0
  flatpak list --columns=ref 2>/dev/null | awk '{print $1}' | grep -Fxq "$id"
}

have_pkg() {
  # rpm -q returns 0 if installed (layered or in base); good enough for idempotency
  rpm -q "$1" >/dev/null 2>&1
}

parse_deps() {
  # Emits one package name per line from:
  #  - YAML like:
  #       dependencies:
  #         - pkg1
  #         - pkg2
  #  - OR simple newline/“- ” list
  local file="$1"
  if grep -Eq '^[[:space:]]*dependencies:[[:space:]]*$' "$file"; then
    # strict YAML-ish block after 'dependencies:'
    awk '
      /^[[:space:]]*dependencies:[[:space:]]*$/ { inlist=1; next }
      inlist && /^[[:space:]]*-[[:space:]]*/ {
        gsub(/^[[:space:]]*-[[:space:]]*/, "", $0);
        if ($0 !~ /^[[:space:]]*$/) print $0
      }
      inlist && NF==0 { next }
    ' "$file"
  else
    # plain list (allow leading "- ")
    sed -E 's/^[[:space:]]*-[[:space:]]*//; s/[[:space:]]+$//' "$file" \
      | grep -Ev '^[[:space:]]*(#|$)'
  fi
}

ensure_line_in_file() {
  # Usage: ensure_line_in_file <file> "<exact line>"
  local file="$1"; shift
  local line="$*"
  [[ -f "$file" ]] || touch "$file"
  if grep -Fxq "$line" "$file"; then
    return 0
  fi
  if $DRY_RUN; then
    warn "Dry run: would append to $file: $line"
  else
    printf "%s\n" "$line" >> "$file"
  fi
}

maybe_sudo() {
  if [[ $EUID -ne 0 ]]; then
    sudo "$@"
  else
    "$@"
  fi
}

pending_deployment() {
  # Lightweight text check (no jq dependency)
  rpm-ostree status 2>/dev/null | grep -q "PendingDeployment:"
}

install_flatpaks() {
  # Idempotently install flatpaks listed in $FLATPAK_FILE.
  if ! have_cmd flatpak; then
    warn "flatpak not found; skipping Flatpak installation."
    return 0
  fi
  if [[ ! -f "$FLATPAK_FILE" ]]; then
    log "No $FLATPAK_FILE found; skipping Flatpak installation."
    return 0
  fi

  # Ensure flathub remote exists in chosen scope
  local remote_args=()
  if [[ "$FLATPAK_SCOPE" == "user" ]]; then
    remote_args+=(--user)
  elif [[ "$FLATPAK_SCOPE" == "system" ]]; then
    remote_args+=(--system)
  else
    warn "Unknown FLATPAK_SCOPE='$FLATPAK_SCOPE'; defaulting to user."
    remote_args+=(--user)
  fi

  if ! flatpak "${remote_args[@]}" remotes | awk '{print $1}' | grep -qx flathub; then
    log "Adding flathub remote (${FLATPAK_SCOPE})…"
    if $DRY_RUN; then
      warn "Dry run: would add flathub remote"
    else
      flatpak "${remote_args[@]}" remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo || warn "Failed to add flathub remote."
    fi
  fi

  mapfile -t refs < <(parse_flatpaks "$FLATPAK_FILE" | awk 'NF')
  if [[ ${#refs[@]} -eq 0 ]]; then
    log "No flatpaks listed in $FLATPAK_FILE."
    return 0
  fi

  for ref in "${refs[@]}"; do
    if flatpak_installed "$ref"; then
      log "Flatpak already installed: $ref"
    else
      if $DRY_RUN; then
        warn "Dry run: would install flatpak $ref (${FLATPAK_SCOPE})"
      else
        log "Installing flatpak: $ref (${FLATPAK_SCOPE})"
        flatpak "${remote_args[@]}" install -y --noninteractive flathub "$ref" || warn "flatpak install failed for $ref"
      fi
    fi
  done
}

bootstrap_nvchad() {
  # Idempotently install NvChad starter after Neovim is available and no pending deployment.
  # Honors: DRY_RUN, FORCE_NVCHAD, NVCHAD_OVERLAY_SRC
  local nvim_cfg="$HOME/.config/nvim"

  if ! have_cmd nvim; then
    warn "Neovim not found on PATH; skipping NvChad bootstrap."
    warn "Install Neovim (and reboot Silverblue if newly layered), then re-run with --nvchad."
    return 0
  fi

  if pending_deployment; then
    warn "A new rpm-ostree deployment is pending. Reboot before installing NvChad."
    return 0
  fi

  # Decide whether to install or skip based on existing config
  local do_install=true
  if [[ -d "$nvim_cfg" ]] && find "$nvim_cfg" -mindepth 1 -print -quit | grep -q .; then
    if $FORCE_NVCHAD; then
      local bak="$(backup_dirname "$nvim_cfg")"
      if $DRY_RUN; then
        warn "Dry run: would move existing '$nvim_cfg' to '$bak'"
      else
        log "Backing up existing Neovim config to '$bak'"
        mv "$nvim_cfg" "$bak"
      fi
    else
      log "Existing Neovim config detected at '$nvim_cfg'; skipping NvChad install (use --force-nvchad to overwrite)."
      do_install=false
    fi
  fi

  if $do_install; then
    need_cmd git
    if $DRY_RUN; then
      warn "Dry run: would clone NvChad starter into '$nvim_cfg'"
    else
      log "Cloning NvChad starter into '$nvim_cfg'…"
      git clone --depth=1 https://github.com/NvChad/starter "$nvim_cfg"
    fi
  fi

  # Optional overlay of user's config onto NvChad tree
  if [[ -n "$NVCHAD_OVERLAY_SRC" ]]; then
    if [[ -d "$NVCHAD_OVERLAY_SRC" ]]; then
      need_cmd rsync
      local overlay_backup="$HOME/.nvim_overlay_backups/$(timestamp)"
      mkdir -p "$overlay_backup"
      log "Overlaying custom Neovim config from '$NVCHAD_OVERLAY_SRC' → '$nvim_cfg' (backups in $overlay_backup)"
      local rsync_flags=( -aHAX --human-readable --backup --backup-dir "$overlay_backup" --delete-excluded )
      if $DRY_RUN; then rsync_flags+=( -n -v ); else rsync_flags+=( -v ); fi
      rsync "${rsync_flags[@]}" "$NVCHAD_OVERLAY_SRC"/ "$nvim_cfg"/
      if $DRY_RUN; then warn "Dry run: NvChad overlay not applied."; fi
    else
      warn "NvChad overlay path not found or not a directory: '$NVCHAD_OVERLAY_SRC' (skipping overlay)."
    fi
  fi

  # Prime plugins in headless mode (safe to run multiple times)
  if have_cmd nvim; then
    if $DRY_RUN; then
      warn "Dry run: would run 'nvim --headless +\"Lazy! sync\" +qa'"
    else
      log "Priming NvChad plugins (headless)…"
      # Do not fail the whole bootstrap if plugin sync errors out.
      nvim --headless +"Lazy! sync" +qa >/dev/null 2>&1 || warn "NvChad plugin sync returned non-zero; you can run it interactively later."
    fi
  fi

  log "NvChad bootstrap step complete."
}

bootstrap_ohmyzsh() {
  # Idempotent Oh My Zsh setup; integrates with Powerlevel10k if present.
  local zshrc="${HOME}/.zshrc"

  if ! have_cmd zsh; then
    warn "zsh not available; skipping Oh My Zsh."
    return 0
  fi
  if pending_deployment; then
    warn "A new rpm-ostree deployment is pending. Reboot, then re-run with --ohmyzsh."
    return 0
  fi
  need_cmd git

  # Install or update oh-my-zsh
  if [[ -d "$OHMYZSH_DIR/.git" ]]; then
    log "Oh My Zsh already present at '$OHMYZSH_DIR'; updating…"
    if $DRY_RUN; then
      warn "Dry run: would 'git -C \"$OHMYZSH_DIR\" pull --ff-only'"
    else
      git -C "$OHMYZSH_DIR" pull --ff-only || warn "oh-my-zsh: git pull failed; continuing."
    fi
  else
    log "Installing Oh My Zsh into '$OHMYZSH_DIR'…"
    if $DRY_RUN; then
      warn "Dry run: would 'git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git \"$OHMYZSH_DIR\"'"
    else
      git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git "$OHMYZSH_DIR"
    fi
  fi

  # Resolve theme default
  local theme="$OHMYZSH_THEME"
  if [[ -z "$theme" ]]; then
    # Prefer powerlevel10k if installed; else fallback
    if [[ -d "$P10K_DIR" || -d "$OHMYZSH_DIR/custom/themes/powerlevel10k" ]]; then
      theme="powerlevel10k/powerlevel10k"
    else
      theme="robbyrussell"
    fi
  fi

  # Ensure P10K theme available in OMZ themes if selected
  if [[ "$theme" == "powerlevel10k/powerlevel10k" ]]; then
    local omz_p10k="$OHMYZSH_DIR/custom/themes/powerlevel10k"
    if [[ ! -d "$omz_p10k" ]]; then
      if [[ -d "$P10K_DIR" ]]; then
        # Symlink our existing P10K into OMZ custom themes
        if $DRY_RUN; then
          warn "Dry run: would symlink '$P10K_DIR' → '$omz_p10k'"
        else
          mkdir -p "$(dirname "$omz_p10k")"
          ln -s "$P10K_DIR" "$omz_p10k"
        fi
      else
        # Clone upstream theme into OMZ custom themes
        log "Fetching Powerlevel10k theme into Oh My Zsh custom themes…"
        if $DRY_RUN; then
          warn "Dry run: would 'git clone --depth=1 https://github.com/romkatv/powerlevel10k.git \"$omz_p10k\"'"
        else
          git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$omz_p10k"
        fi
      fi
    fi
  fi

  # Install popular plugins by name → repo mapping (optional)
  # Accepts comma-separated list in $OHMYZSH_PLUGINS
  IFS=',' read -r -a _req_plugins <<< "$OHMYZSH_PLUGINS"
  declare -A plugin_repo=(
    [zsh-autosuggestions]=https://github.com/zsh-users/zsh-autosuggestions.git
    [zsh-syntax-highlighting]=https://github.com/zsh-users/zsh-syntax-highlighting.git
    [zsh-completions]=https://github.com/zsh-users/zsh-completions.git
  )
  for p in "${_req_plugins[@]}"; do
    p="${p//[[:space:]]/}"
    [[ -z "$p" || "$p" == "git" ]] && continue
    local target="$OHMYZSH_DIR/custom/plugins/$p"
    local url="${plugin_repo[$p]}"
    if [[ -n "$url" ]]; then
      if [[ -d "$target/.git" ]]; then
        if $DRY_RUN; then warn "Dry run: would update plugin '$p'"; else git -C "$target" pull --ff-only || true; fi
      else
        if $DRY_RUN; then warn "Dry run: would clone plugin '$p' → '$target'"; else mkdir -p "$(dirname "$target")"; git clone --depth=1 "$url" "$target"; fi
      fi
    fi
  done

  # Managed block in ~/.zshrc
  local begin="# >>> oh-my-zsh (managed)"
  local end="# <<< oh-my-zsh (managed)"
  # Build plugins=(...) from list, ensure 'git' is present
  local plist="git"
  for p in "${_req_plugins[@]}"; do
    p="${p//[[:space:]]/}"
    [[ -z "$p" || "$p" == "git" ]] && continue
    plist="$plist $p"
  done
  local block="${begin}
export ZSH=\"${OHMYZSH_DIR}\"
ZSH_THEME=\"${theme}\"
plugins=(${plist})
source \"\${ZSH}/oh-my-zsh.sh\"
${end}"

  if grep -qF "$begin" "$zshrc" 2>/dev/null; then
    if $DRY_RUN; then
      warn "Dry run: would update managed oh-my-zsh block in $zshrc"
    else
      awk -v b="$begin" -v e="$end" -v repl="$block" '
        BEGIN{inb=0}
        $0==b{print repl; inb=1; next}
        $0==e{inb=0; next}
        !inb{print}
      ' "$zshrc" > "${zshrc}.tmp" && mv "${zshrc}.tmp" "$zshrc"
    fi
  else
    ensure_line_in_file "$zshrc" ""
    if $DRY_RUN; then warn "Dry run: would append managed oh-my-zsh block to $zshrc"; else printf "\n%s\n" "$block" >> "$zshrc"; fi
  fi

  log "Installing zsh autosuggestions"
  git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

  log "Oh My Zsh bootstrap step complete."
}

bootstrap_powerlevel10k() {
  # Idempotent Powerlevel10k setup (no Oh My Zsh required).
  # Requires zsh available and (ideally) no pending rpm-ostree deployment if zsh was just layered.
  local zshrc="${HOME}/.zshrc"
  local p10k_file="${HOME}/.p10k.zsh"

  if ! have_cmd zsh; then
    warn "zsh is not available; skipping Powerlevel10k."
    return 0
  fi

  if pending_deployment; then
    warn "A new rpm-ostree deployment is pending. Reboot, then re-run with --p10k."
    return 0
  fi

  need_cmd git

  # Clone or update the theme repo
  if [[ -d "$P10K_DIR/.git" ]]; then
    log "Powerlevel10k already present at '$P10K_DIR'; updating…"
    if $DRY_RUN; then
      warn "Dry run: would 'git -C \"$P10K_DIR\" pull --ff-only'"
    else
      git -C "$P10K_DIR" pull --ff-only || warn "git pull failed; continuing."
    fi
  else
    log "Installing Powerlevel10k into '$P10K_DIR'…"
    if $DRY_RUN; then
      warn "Dry run: would 'git clone --depth=1 \"$P10K_REPO\" \"$P10K_DIR\"'"
    else
      mkdir -p "$(dirname "$P10K_DIR")"
      git clone --depth=1 "$P10K_REPO" "$P10K_DIR"
    fi
  fi

  # Optional: overlay user config to ~/.p10k.zsh
  if [[ -n "$P10K_CONFIG_SRC" ]]; then
    if [[ -f "$P10K_CONFIG_SRC" ]]; then
      if [[ -f "$p10k_file" && $FORCE_P10K == false ]]; then
        log "Existing $p10k_file detected; leaving as-is (use --force-p10k to overwrite)."
      else
        local bak="$(backup_dirname "$p10k_file")"
        if $DRY_RUN; then
          [[ -f "$p10k_file" ]] && warn "Dry run: would move '$p10k_file' → '$bak'"
          warn "Dry run: would copy '$P10K_CONFIG_SRC' → '$p10k_file'"
        else
          [[ -f "$p10k_file" ]] && { log "Backing up $p10k_file → $bak"; mv "$p10k_file" "$bak"; }
          log "Placing Powerlevel10k config at $p10k_file"
          install -Dm644 "$P10K_CONFIG_SRC" "$p10k_file"
        fi
      fi
    else
      warn "Provided --p10k-config not found: '$P10K_CONFIG_SRC' (skipping config overlay)."
    fi
  fi

  # Ensure .zshrc sources Powerlevel10k and (optionally) ~/.p10k.zsh, idempotently.
  local begin="# >>> powerlevel10k (managed)"
  local end="# <<< powerlevel10k (managed)"
  # Replace existing managed block or append a new one
  # If Oh My Zsh is installed, do NOT source the theme file directly; let OMZ theme handle it.
  local block
  if [[ -d "$OHMYZSH_DIR" ]]; then
    block="${begin}
[[ -r \"${p10k_file}\" ]] && source \"${p10k_file}\"
${end}"
  else
    block="${begin}
[[ -r \"${p10k_file}\" ]] && source \"${p10k_file}\"
[[ -d \"${P10K_DIR}\" ]] && source \"${P10K_DIR}/powerlevel10k.zsh-theme\"
${end}"
  fi
  if grep -qF "$begin" "$zshrc" 2>/dev/null; then
    if $DRY_RUN; then
      warn "Dry run: would update managed p10k block in $zshrc"
    else
      awk -v b="$begin" -v e="$end" -v repl="$block" '
        BEGIN{inb=0}
        $0==b{print repl; inb=1; next}
        $0==e{inb=0; next}
        !inb{print}
      ' "$zshrc" > "${zshrc}.tmp" && mv "${zshrc}.tmp" "$zshrc"
    fi
  else
    ensure_line_in_file "$zshrc" ""
    if $DRY_RUN; then
      warn "Dry run: would append managed p10k block to $zshrc"
    else
      printf "\n%s\n" "$block" >> "$zshrc"
    fi
  fi

  log "Powerlevel10k bootstrap step complete."
}

sync_dotfiles() {
  local roots=(
    ".zshrc"
    ".p10k.zsh"
    ".config"
  )

  if [[ ! -d "$DOTFILES_SRC" ]]; then
    warn "Dotfiles dir not found: $DOTFILES_SRC"
    return 0
  fi

  ( 
    set -euo pipefail
    shopt -s dotglob nullglob
    cd "$DOTFILES_SRC"

    for root in "${roots[@]}"; do
      if [[ -d "$root" ]]; then
        # 1) Create directories in HOME mirroring the repo
        find "$root" -type d -print0 | while IFS= read -r -d '' d; do
          install -d "$HOME/${d#.}"
        done
        # 2) Copy files over, overwriting
        find "$root" -type f -print0 | while IFS= read -r -d '' f; do
          install -D -m 0644 "$f" "$HOME/${f#.}"
        done
        log "→ copied tree: ~/${root#.}"
      elif [[ -f "$root" ]]; then
        install -D -m 0644 "$root" "$HOME/${root#.}"
        log "→ copied file: ~/${root#.}"
      else
        warn "Skipping missing path in repo: $root"
      fi
    done
  )
}

set_shell_zsh() {
  if ! $DO_CHSH; then
    log "Skipping chsh to zsh (per flag)."
    return 0
  fi
  if ! command -v zsh >/dev/null 2>&1; then
    warn "zsh not installed yet; skipping chsh."
    return 0
  fi
  local target="/usr/bin/zsh"
  if [[ "$SHELL" == "$target" ]]; then
    log "Login shell already set to zsh."
    return 0
  fi
  if $DRY_RUN; then
    warn "Dry run: would run 'chsh -s $target $USER'"
  else
    log "Setting default shell to zsh…"
    chsh -s "$target" "$USER" || warn "chsh failed (non-interactive env?). You can run: chsh -s $target"
  fi
}

install_vscode_flatpak_integration() {
  git clone https://github.com/owtaylor/toolbox-vscode.git
  cd toolbox-vscode
  [ -d ~/.local/bin ] || mkdir ~/.local/bin
  ln -s "$PWD/code.sh" ~/.local/bin/code
}

# --- Parse flags --------------------------------------------------------------
while (( "$#" )); do
  case "${1:-}" in
    -d|--deps)        DEPS_FILE="${2:?}"; shift 2 ;;
    -s|--dotfiles)    DOTFILES_SRC="${2:?}"; shift 2 ;;
    --no-zsh-chsh)    DO_CHSH=false; shift ;;
    --nvchad)         INSTALL_NVCHAD=true; shift ;;
    --nvchad-overlay) NVCHAD_OVERLAY_SRC="${2:?}"; shift 2 ;;
    --force-nvchad)   FORCE_NVCHAD=true; shift ;;
    --p10k)           INSTALL_P10K=true; shift ;;
    --p10k-dir)       P10K_DIR="${2:?}"; shift 2 ;;
    --p10k-config)    P10K_CONFIG_SRC="${2:?}"; shift 2 ;;
    --force-p10k)     FORCE_P10K=true; shift ;;
    --ohmyzsh)        INSTALL_OHMYZSH=true; shift ;;
    --ohmyzsh-dir)    OHMYZSH_DIR="${2:?}"; shift 2 ;;
    --ohmyzsh-theme)  OHMYZSH_THEME="${2:-}"; shift 2 ;;
    --ohmyzsh-plugins) OHMYZSH_PLUGINS="${2:?}"; shift 2 ;;
    --force-ohmyzsh)  FORCE_OHMYZSH=true; shift ;;
    --laptop)         LAPTOP=true; shift ;;
    --laptop-deps)    LAPTOP_DEPS_FILE="${2:?}"; shift 2 ;;
    --dry-run)        DRY_RUN=true; shift ;;
    -h|--help)
      sed -n '1,70p' "$0"; exit 0 ;;
    *)
      err "Unknown option: $1"; exit 2 ;;
  esac
done

# --- Preflight ----------------------------------------------------------------
need_cmd grep
need_cmd awk
need_cmd sed
need_cmd rpm
need_cmd rsync

if $INSTALL_OHMYZSH && ! $DRY_RUN; then
  need_cmd git
fi

if $INSTALL_NVCHAD && ! $DRY_RUN; then
  need_cmd git
fi

if ! is_silverblue; then
  warn "This script is tuned for Fedora Silverblue (rpm-ostree). Proceeding anyway."
fi

# --- Flatpaks (auto, if flatpak.yaml present) ---------------------------------
install_flatpaks

# If user asked for Powerlevel10k now and not a dry-run, ensure git exists
if $INSTALL_P10K && ! $DRY_RUN; then
  need_cmd git
fi

if [[ ! -f "$DEPS_FILE" ]]; then
  err "Deps file not found: $DEPS_FILE"
  exit 1
fi

# --- Read & filter deps -------------------------------------------------------
mapfile -t BASE_DEPS < <(parse_deps "$DEPS_FILE" | awk 'NF')
if [[ ${#BASE_DEPS[@]} -eq 0 ]]; then
  warn "No dependencies found in $DEPS_FILE."
  BASE_DEPS=()
fi

LAPTOP_DEPS=()
if $LAPTOP; then
  if [[ -f "$LAPTOP_DEPS_FILE" ]]; then
    mapfile -t LAPTOP_DEPS < <(parse_deps "$LAPTOP_DEPS_FILE" | awk 'NF')
    if [[ ${#LAPTOP_DEPS[@]} -eq 0 ]]; then
      warn "Laptop deps file '$LAPTOP_DEPS_FILE' contained no packages."
    else
      log "Including laptop dependencies from '$LAPTOP_DEPS_FILE'."
    fi
  else
    warn "Laptop deps file not found: $LAPTOP_DEPS_FILE (skipping laptop extras)."
  fi
fi

ALL_DEPS_RAW=( "${BASE_DEPS[@]}" "${LAPTOP_DEPS[@]}" )
ALL_DEPS=(); dedupe ALL_DEPS "${ALL_DEPS_RAW[@]}"

MISSING=()
for pkg in "${ALL_DEPS[@]}"; do
  if have_pkg "$pkg"; then
    log "Already installed: $pkg"
  else
    MISSING+=("$pkg")
  fi
done

# --- Install missing via rpm-ostree -------------------------------------------
if ((${#MISSING[@]})); then
  log "Missing packages: ${MISSING[*]}"
  if $DRY_RUN; then
    warn "Dry run: would run: rpm-ostree install ${MISSING[*]}"
  else
    log "Layering packages with rpm-ostree (this may stage a reboot)…"
    maybe_sudo rpm-ostree install "${MISSING[@]}"
    if pending_deployment; then
      warn "A new deployment is pending. You should reboot to finalize the install."
    else
      log "No pending deployment detected."
    fi
  fi
else
  log "All dependencies already present. Skipping rpm-ostree install."
fi

if $INSTALL_NVCHAD; then
  bootstrap_nvchad
else
  log "NvChad install not requested. Use --nvchad to enable."
fi

# --- Dotfiles -----------------------------------------------------------------
sync_dotfiles "$DOTFILES_SRC"

# --- Oh My Zsh (before P10K so P10K can adapt) --------------------------------
if $INSTALL_OHMYZSH; then
  bootstrap_ohmyzsh
else
  log "Oh My Zsh install not requested. Use --ohmyzsh to enable."
fi

# --- Powerlevel10k (after dotfiles; requires zsh available) -------------------
if $INSTALL_P10K; then
  bootstrap_powerlevel10k
else
  log "Powerlevel10k install not requested. Use --p10k to enable."
fi

# --- Optional: set shell to zsh ----------------------------------------------
set_shell_zsh

install_vscode_flatpak_integration

log "Bootstrap complete."
